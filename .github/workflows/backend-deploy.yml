name: 🔧 Backend Deploy

run-name: 🔧 Backend Deploy to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/staging' && 'staging') || (github.ref == 'refs/heads/production' && 'prod') || 'unknown' }}

on:
  # Note: Push triggers removed for staging/production
  # These branches are now handled by coordinated-deploy.yml
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: esenciafest-2025
  AWS_ROLE_ARN: arn:aws:iam::079827849938:role/GitHubActions-SuraEsenciaFest2025

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/production" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  validate-and-build:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true'
    permissions:
      id-token: write
      contents: read
    outputs:
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Backend-Build
          aws-region: ${{ env.AWS_REGION }}

      - name: Check for backend changes
        id: changes
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "🔄 Force deployment requested"
            exit 0
          fi
          
          if git diff --quiet HEAD~1 HEAD -- iac/backend/; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No backend changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📦 Backend changes detected"
          fi

      - name: Validate SAM template
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          cd iac/backend
          sam validate

      - name: Build SAM application
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          cd iac/backend
          sam build --use-container

      - name: Upload SAM build artifacts
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sam-build-${{ needs.determine-environment.outputs.environment }}
          path: iac/backend/.aws-sam/build/
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, validate-and-build]
    if: needs.determine-environment.outputs.should_deploy == 'true' && needs.validate-and-build.outputs.has_changes == 'true'
    environment: 
      name: backend-${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.api_url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        run: |
          echo "[SIMULATED] Would configure AWS credentials"
          echo "role-to-assume: ${{ env.AWS_ROLE_ARN }}"
          echo "role-session-name: GitHubActions-Backend-Deploy"
          echo "aws-region: ${{ env.AWS_REGION }}"

      - name: Download SAM build artifacts
        uses: actions/download-artifact@v4
        with:
          name: sam-build-${{ needs.determine-environment.outputs.environment }}
          path: iac/backend/.aws-sam/build/

      - name: Deploy SAM application
        id: deploy
        run: |
          cd iac/backend
          
          # Configure stack name and parameters
          STACK_NAME="${{ env.PROJECT_NAME }}-backend-${{ needs.determine-environment.outputs.environment }}"
          echo "[SIMULATED] Would deploy SAM stack: $STACK_NAME"
          
          # Set API certificate ARN based on environment
          if [ "${{ needs.determine-environment.outputs.environment }}" = "prod" ]; then
            API_CERT_ARN="arn:aws:acm:us-east-1:079827849938:certificate/c22af769-6581-422f-a147-34c3c6929a49"
          else
            API_CERT_ARN="arn:aws:acm:us-east-1:079827849938:certificate/ba442ee4-d5ee-47cf-abe7-8a553ea33fe3"
          fi
          echo "[SIMULATED] Using certificate ARN: $API_CERT_ARN"
          
          # Deploy with SAM using toml config file
          CONFIG_FILE="${{ needs.determine-environment.outputs.environment }}.toml"
          echo "[SIMULATED] Would run: sam deploy --config-file $CONFIG_FILE"
          
          # Simulate deployment outputs
          API_URL="https://simulated-api.execute-api.us-east-1.amazonaws.com/${{ needs.determine-environment.outputs.environment }}"
          CUSTOM_API_URL="https://api.${{ needs.determine-environment.outputs.environment }}.esenciafest.com"
          
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "custom_api_url=$CUSTOM_API_URL" >> $GITHUB_OUTPUT

      - name: Test API health
        run: |
          echo "🔍 Testing API health endpoint..."
          echo "[SIMULATED] Would wait 30 seconds for API to be ready"
          
          API_URL="${{ steps.deploy.outputs.api_url }}"
          HEALTH_URL="$API_URL/health"
          echo "[SIMULATED] Would test health endpoint: $HEALTH_URL"
          
          # Simulate successful health check
          response="200"
          echo "[SIMULATED] Health check response: $response"
          
          if [ "$response" = "200" ]; then
            echo "✅ API health check passed (simulated)"
          else
            echo "⚠️  API health check returned status: $response (simulated)"
            echo "🔗 Health URL: $HEALTH_URL"
          fi

      - name: Update deployment status
        run: |
          echo "✅ Backend deployment completed successfully"
          echo "🚀 API URL: ${{ steps.deploy.outputs.api_url }}"
          echo "🌐 Custom API URL: ${{ steps.deploy.outputs.custom_api_url }}"
          echo "📦 Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "🏗️  Stack: ${{ env.PROJECT_NAME }}-backend-${{ needs.determine-environment.outputs.environment }}"

  notify:
    runs-on: ubuntu-latest
    needs: [determine-environment, validate-and-build, deploy]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.validate-and-build.outputs.has_changes }}" = "false" ]; then
            echo "ℹ️  No backend changes detected - deployment skipped"
          elif [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "🎉 Backend deployment to ${{ needs.determine-environment.outputs.environment }} was successful!"
          else
            echo "❌ Backend deployment to ${{ needs.determine-environment.outputs.environment }} failed."
            exit 1
          fi