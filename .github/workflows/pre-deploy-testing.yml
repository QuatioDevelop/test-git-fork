name: üß™ Pre-Deploy Testing

run-name: üß™ Pre-Deploy Testing - ${{ github.ref_name }}

on:
  # Removed push trigger - now handled by orchestrated-deploy.yml
  workflow_call:
    inputs:
      environment:
        description: 'Environment to test for'
        required: true
        type: string
  workflow_dispatch:

env:
  NODE_VERSION: '22'

jobs:
  determine-environment:
    uses: ./.github/workflows/determine-environment.yml
    with:
      environment: ${{ inputs.environment }}

  test-and-build:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: always()  # Run regardless of determine-environment result
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment variables
        run: |
          # Use environment from unified detection
          ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
          echo "üéØ Using environment from unified detection: $ENVIRONMENT"
          echo "üìç Environment source: unified detection workflow"
          
          if [ "$ENVIRONMENT" = "dev" ]; then
            cp apps/client/.env.development apps/client/.env.local
            cp apps/admin/.env.development apps/admin/.env.local || echo "No .env.development for admin, using defaults"
          elif [ "$ENVIRONMENT" = "staging" ]; then
            cp apps/client/.env.staging apps/client/.env.local
            cp apps/admin/.env.staging apps/admin/.env.local || echo "No .env.staging for admin, using defaults"
          elif [ "$ENVIRONMENT" = "prod" ]; then
            cp apps/client/.env.production apps/client/.env.local
            cp apps/admin/.env.production apps/admin/.env.local || echo "No .env.production for admin, using defaults"
          fi
          echo "üåç Environment variables configured for: $ENVIRONMENT"

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests..."
          cd apps/shared && npm run test:run
          cd ../client && npm run test:run  
          cd ../admin && npm run test:run

      - name: Run smoke tests
        run: |
          echo "üí® Running smoke tests..."
          cd tests/smoke
          npx vitest run

      - name: Lint applications
        run: npm run lint

      - name: Type check applications
        run: npm run type-check

      - name: Build applications
        run: |
          echo "üèóÔ∏è Building applications..."
          npm run build

      - name: Export static builds
        run: npm run export

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/client/out/
            apps/admin/out/
          retention-days: 7

  test-summary:
    runs-on: ubuntu-latest
    needs: [determine-environment, test-and-build]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## üß™ Pre-Deploy Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-and-build.result }}" = "success" ]; then
            echo "‚úÖ **All tests and build passed**" >> $GITHUB_STEP_SUMMARY
            echo "- Unit Tests ‚úì" >> $GITHUB_STEP_SUMMARY
            echo "- Smoke Tests ‚úì" >> $GITHUB_STEP_SUMMARY
            echo "- Build & Validation (lint/type-check) ‚úì" >> $GITHUB_STEP_SUMMARY
            echo "- Artifact Upload ‚úì" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Tests/Build failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail pipeline if any step failed
        if: needs.test-and-build.result == 'failure'
        run: |
          echo "‚ùå Pre-deploy pipeline failed"
          exit 1