name: 🧪 Pre-Deploy Testing

run-name: 🧪 Pre-Deploy Testing - ${{ github.ref_name }}

on:
  # Removed push trigger - now handled by orchestrated-deploy.yml
  workflow_call:
    inputs:
      environment:
        description: 'Environment to test for'
        required: true
        type: string
  workflow_dispatch:

env:
  NODE_VERSION: '22'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/production" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          echo "🌍 Testing environment: ${{ steps.env.outputs.environment }}"

  tests:
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment variables
        run: |
          # Copy appropriate .env file to .env.local for each app based on branch environment
          if [ "${{ needs.determine-environment.outputs.environment }}" = "dev" ]; then
            cp apps/client/.env.development apps/client/.env.local
            cp apps/admin/.env.development apps/admin/.env.local || echo "No .env.development for admin, using defaults"
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            cp apps/client/.env.staging apps/client/.env.local
            cp apps/admin/.env.staging apps/admin/.env.local || echo "No .env.staging for admin, using defaults"
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "prod" ]; then
            cp apps/client/.env.production apps/client/.env.local
            cp apps/admin/.env.production apps/admin/.env.local || echo "No .env.production for admin, using defaults"
          fi
          echo "🌍 Environment variables configured for: ${{ needs.determine-environment.outputs.environment }}"

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          cd apps/shared && npm run test:run
          cd ../client && npm run test:run
          cd ../admin && npm run test:run

      - name: Run smoke tests
        run: |
          echo "💨 Running smoke tests..."
          cd tests/smoke
          npx vitest run

  build:
    runs-on: ubuntu-latest
    needs: [determine-environment, tests]
    # Only build if tests pass
    if: needs.tests.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment variables
        run: |
          # Copy appropriate .env file to .env.local for each app based on branch environment
          if [ "${{ needs.determine-environment.outputs.environment }}" = "dev" ]; then
            cp apps/client/.env.development apps/client/.env.local
            cp apps/admin/.env.development apps/admin/.env.local || echo "No .env.development for admin, using defaults"
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            cp apps/client/.env.staging apps/client/.env.local
            cp apps/admin/.env.staging apps/admin/.env.local || echo "No .env.staging for admin, using defaults"
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "prod" ]; then
            cp apps/client/.env.production apps/client/.env.local
            cp apps/admin/.env.production apps/admin/.env.local || echo "No .env.production for admin, using defaults"
          fi
          echo "🌍 Environment variables configured for: ${{ needs.determine-environment.outputs.environment }}"

      - name: Build and validate applications
        run: |
          echo "🏗️ Building applications (includes lint & type-check)..."
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/client/out/
            apps/admin/out/
          retention-days: 7

  test-summary:
    runs-on: ubuntu-latest
    needs: [determine-environment, tests, build]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## 🧪 Pre-Deploy Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.tests.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ **All tests and build passed**" >> $GITHUB_STEP_SUMMARY
            echo "- Unit Tests ✓" >> $GITHUB_STEP_SUMMARY
            echo "- Smoke Tests ✓" >> $GITHUB_STEP_SUMMARY
            echo "- Build & Validation (lint/type-check) ✓" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.tests.result }}" = "failure" ]; then
            echo "❌ **Tests failed**" >> $GITHUB_STEP_SUMMARY
            echo "Build was skipped due to test failures" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.result }}" = "failure" ]; then
            echo "❌ **Build failed**" >> $GITHUB_STEP_SUMMARY
            echo "Tests passed but build/validation failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Pipeline failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail pipeline if any step failed
        if: needs.tests.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Pre-deploy pipeline failed"
          exit 1