name: 🧪 PR Testing

run-name: 🧪 PR Testing - ${{ github.head_ref || github.ref_name }}

on:
  pull_request:
    branches:
      - main
      - staging
      - production
    paths:
      - 'apps/**'
      - 'tests/**'
      - 'package.json'
      - 'turbo.json'
      - 'vitest.config.ts'
      - '.github/workflows/pr-testing.yml'

env:
  NODE_VERSION: '22'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linters
        run: |
          echo "🔍 Running linters..."
          npm run lint
          npm run type-check

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests - Shared
        run: cd apps/shared && npm run test:run

      - name: Run unit tests - Client
        run: cd apps/client && npm run test:run

      - name: Run unit tests - Admin
        run: cd apps/admin && npm run test:run

      - name: Run unit tests with coverage
        run: |
          cd apps/shared && npm run test:coverage
          cd ../client && npm run test:coverage
          cd ../admin && npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.sha }}
          path: apps/*/coverage/
          retention-days: 7

      - name: Generate coverage summary
        run: |
          echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Statements | Branches | Functions | Lines |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------------|----------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for app in apps/*/; do
            if [ -f "$app/coverage/coverage-summary.json" ]; then
              app_name=$(basename "$app")
              statements=$(jq -r '.total.statements.pct' "$app/coverage/coverage-summary.json")
              branches=$(jq -r '.total.branches.pct' "$app/coverage/coverage-summary.json")
              functions=$(jq -r '.total.functions.pct' "$app/coverage/coverage-summary.json")
              lines=$(jq -r '.total.lines.pct' "$app/coverage/coverage-summary.json")
              echo "| $app_name | ${statements}% | ${branches}% | ${functions}% | ${lines}% |" >> $GITHUB_STEP_SUMMARY
            fi
          done

  smoke-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: |
          cd tests/smoke
          npx vitest run

  build-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: |
          echo "🏗️ Building applications to verify build integrity..."
          npm run build
          echo "✅ Build completed successfully"

  test-summary:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, smoke-tests, build-check]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## 🧪 PR Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lint
          if [ "${{ needs.lint.result }}" = "success" ]; then
            echo "✅ **Lint & Type Check**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lint.result }}" = "failure" ]; then
            echo "❌ **Lint & Type Check**: Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lint.result }}" = "skipped" ]; then
            echo "⏭️ **Lint & Type Check**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Unit Tests
          if [ "${{ needs.unit-tests.result }}" = "success" ]; then
            echo "✅ **Unit Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.unit-tests.result }}" = "failure" ]; then
            echo "❌ **Unit Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.unit-tests.result }}" = "skipped" ]; then
            echo "⏭️ **Unit Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Smoke Tests
          if [ "${{ needs.smoke-tests.result }}" = "success" ]; then
            echo "✅ **Smoke Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.smoke-tests.result }}" = "failure" ]; then
            echo "❌ **Smoke Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.smoke-tests.result }}" = "skipped" ]; then
            echo "⏭️ **Smoke Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build Check
          if [ "${{ needs.build-check.result }}" = "success" ]; then
            echo "✅ **Build Check**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-check.result }}" = "failure" ]; then
            echo "❌ **Build Check**: Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-check.result }}" = "skipped" ]; then
            echo "⏭️ **Build Check**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Note**: E2E tests run only after deployment to staging/production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **PR**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail pipeline if any test failed
        if: needs.lint.result == 'failure' || needs.unit-tests.result == 'failure' || needs.smoke-tests.result == 'failure' || needs.build-check.result == 'failure'
        run: |
          echo "❌ One or more jobs failed"
          exit 1