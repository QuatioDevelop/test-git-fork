name: 🌐 Frontend Deploy

run-name: 🌐 Frontend Deploy to ${{ inputs.environment || 'dev' }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: esenciafest-2025
  AWS_ROLE_ARN: arn:aws:iam::079827849938:role/GitHubActions-SuraEsenciaFest2025

jobs:
  determine-environment:
    uses: ./.github/workflows/determine-environment.yml
    with:
      environment: ${{ inputs.environment }}

  deploy:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: always()
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.client_url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Attempt to download build artifacts from Pre-Deploy Testing
        id: download-from-testing
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: ./artifacts

      - name: Check if artifacts were downloaded from testing
        id: check-testing-artifacts
        run: |
          echo "=== Debugging artifact download ==="
          echo "🔍 Current SHA: ${{ github.sha }}"
          echo "🔍 Looking for artifact: build-artifacts-${{ github.sha }}"
          echo "🔍 Download step outcome: ${{ steps.download-from-testing.outcome }}"
          echo "🔍 Download step conclusion: ${{ steps.download-from-testing.conclusion }}"
          
          if [ -d "./artifacts" ] && [ "$(ls -A ./artifacts)" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "✅ Artifacts found from pre-deploy-testing"
            echo "📁 Contents:"
            find ./artifacts -type f | head -10
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "❌ No artifacts from pre-deploy-testing"
            echo "📁 Current directory contents:"
            ls -la . || echo "No files"
            echo "📁 Artifacts directory check:"
            [ -d "./artifacts" ] && echo "Directory exists but empty" || echo "Directory does not exist"
          fi

      - name: Restore directory structure from testing artifacts
        if: steps.check-testing-artifacts.outputs.found == 'true'
        run: |
          echo "=== Restoring directory structure from testing artifacts ==="
          mkdir -p apps/client apps/admin
          # Check actual structure and adapt
          if [ -d "artifacts/apps/client/out" ]; then
            cp -r artifacts/apps/client/out apps/client/
            cp -r artifacts/apps/admin/out apps/admin/
          elif [ -d "artifacts/client/out" ]; then
            cp -r artifacts/client/out apps/client/
            cp -r artifacts/admin/out apps/admin/
          else
            echo "❌ Unexpected artifact structure"
            find artifacts -name "out" -type d
            exit 1
          fi
          rm -rf artifacts
          echo "✅ Directory structure restored from testing artifacts"

      - name: Verify build artifacts exist
        if: steps.check-testing-artifacts.outputs.found == 'false'
        run: |
          echo "❌ No artifacts found from pre-deploy-testing"
          echo "This workflow requires artifacts from pre-deploy-testing.yml"
          echo "Please ensure pre-deploy-testing has run successfully for commit: ${{ github.sha }}"
          exit 1

      - name: Configure AWS credentials
        run: |
          echo "[SIMULATED] Would configure AWS credentials"
          echo "role-to-assume: ${{ env.AWS_ROLE_ARN }}"
          echo "role-session-name: GitHubActions-Frontend-Deploy"
          echo "aws-region: ${{ env.AWS_REGION }}"

      - name: Get infrastructure outputs
        id: get-infrastructure
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          STACK_NAME="${{ env.PROJECT_NAME }}-$ENV"
          echo "[SIMULATED] Would get infrastructure outputs from stack: $STACK_NAME"
          
          # Simulate outputs for testing
          CLIENT_BUCKET="simulated-client-bucket-$ENV"
          ADMIN_BUCKET="simulated-admin-bucket-$ENV"
          CLIENT_DOMAIN="simulated-$ENV.cloudfront.net"
          ADMIN_DOMAIN="simulated-admin-$ENV.cloudfront.net"
          
          echo "client_bucket=$CLIENT_BUCKET" >> $GITHUB_OUTPUT
          echo "admin_bucket=$ADMIN_BUCKET" >> $GITHUB_OUTPUT
          echo "client_url=https://$CLIENT_DOMAIN" >> $GITHUB_OUTPUT
          echo "admin_url=https://$ADMIN_DOMAIN" >> $GITHUB_OUTPUT

      - name: Deploy applications
        id: deploy
        run: |
          echo "🚀 Deploying applications..."
          echo "[SIMULATED] Would sync apps/client/out/ to s3://${{ steps.get-infrastructure.outputs.client_bucket }}/"
          echo "[SIMULATED] Would sync apps/admin/out/ to s3://${{ steps.get-infrastructure.outputs.admin_bucket }}/"
          echo "[SIMULATED] Would invalidate CloudFront distributions"
          
          # Show what we're deploying
          echo "📁 Client artifacts:"
          ls -la apps/client/out/ | head -5
          echo "📁 Admin artifacts:"
          ls -la apps/admin/out/ | head -5
          
          # Set outputs for URLs
          echo "client_url=${{ steps.get-infrastructure.outputs.client_url }}" >> $GITHUB_OUTPUT
          echo "admin_url=${{ steps.get-infrastructure.outputs.admin_url }}" >> $GITHUB_OUTPUT
          
          echo "✅ Frontend deployment completed (simulated)"

      - name: Summary
        run: |
          echo "✅ Frontend deployment completed successfully"
          echo "🌐 Client URL: ${{ steps.deploy.outputs.client_url }}"
          echo "⚙️ Admin URL: ${{ steps.deploy.outputs.admin_url }}"
          echo "📦 Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "🔗 Commit SHA: ${{ github.sha }}"
          echo "📋 Artifacts from: Pre-Deploy Testing workflow"