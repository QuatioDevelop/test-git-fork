name: üåê Frontend Deploy

run-name: üåê Frontend Deploy to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'dev') || (github.ref == 'refs/heads/staging' && 'staging') || (github.ref == 'refs/heads/production' && 'prod') || 'unknown' }}

on:
  # Removed all automatic triggers - now only called by orchestrated-deploy.yml
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_build:
        description: 'Skip build and use artifacts from cache'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: esenciafest-2025
  AWS_ROLE_ARN: arn:aws:iam::079827849938:role/GitHubActions-SuraEsenciaFest2025

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    # For workflow_call: trust that caller (Orchestrated Deploy) already validated
    # For workflow_dispatch: allow manual override
    # Removed problematic github.event_name condition that was causing workflow_call issues
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: [determine-environment, download-artifacts]
    if: needs.determine-environment.outputs.should_deploy == 'true' && github.event.inputs.skip_build != 'true' && needs.download-artifacts.outputs.artifacts_found == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests - Shared
        run: cd apps/shared && npm run test:run

      - name: Run unit tests - Client  
        run: cd apps/client && npm run test:run

      - name: Run unit tests - Admin
        run: cd apps/admin && npm run test:run

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ needs.determine-environment.outputs.environment }}
          path: apps/*/coverage/
          retention-days: 7

      - name: Lint applications
        run: npm run lint

      - name: Type check applications
        run: npm run type-check

      - name: Configure environment variables
        run: |
          # Copy appropriate .env file to .env.local for each app based on deployment environment
          if [ "${{ needs.determine-environment.outputs.environment }}" = "dev" ]; then
            cp apps/client/.env.development apps/client/.env.local
            cp apps/admin/.env.development apps/admin/.env.local || echo "No .env.development for admin, using defaults"
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "staging" ]; then
            cp apps/client/.env.staging apps/client/.env.local
            cp apps/admin/.env.staging apps/admin/.env.local || echo "No .env.staging for admin, using defaults"
          elif [ "${{ needs.determine-environment.outputs.environment }}" = "prod" ]; then
            cp apps/client/.env.production apps/client/.env.local
            cp apps/admin/.env.production apps/admin/.env.local || echo "No .env.production for admin, using defaults"
          fi
          echo "Environment variables configured for: ${{ needs.determine-environment.outputs.environment }}"

      - name: Build applications
        run: npm run build

      - name: Export static builds
        run: npm run export

      - name: Upload client build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/client/out/
          retention-days: 7

      - name: Upload admin build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: admin-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/admin/out/
          retention-days: 7

  download-artifacts:
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true'
    outputs:
      artifacts_found: ${{ steps.check.outputs.artifacts_found }}
    steps:
      - name: Attempt to download build artifacts from Pre-Deploy Testing
        id: download
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: pre-deploy-testing.yml
          name: build-artifacts-${{ github.sha }}
          commit: ${{ github.sha }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          path: ./artifacts
          if_no_artifact_found: warn

      - name: Check if artifacts were downloaded
        id: check
        run: |
          if [ -d "./artifacts" ] && [ "$(ls -A ./artifacts)" ]; then
            echo "artifacts_found=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Artifacts found and downloaded"
          else
            echo "artifacts_found=false" >> $GITHUB_OUTPUT
            echo "‚ùå No artifacts found, will need to build"
          fi

      - name: Debug artifact structure
        if: steps.check.outputs.artifacts_found == 'true'
        run: |
          echo "=== Debugging artifact structure ==="
          echo "Contents of artifacts directory:"
          find artifacts -type f | head -20
          echo "Directory structure:"
          find artifacts -type d
          echo "‚úÖ Debug complete"

      - name: Restore expected directory structure
        if: steps.check.outputs.artifacts_found == 'true'
        run: |
          echo "=== Restoring directory structure ==="
          mkdir -p apps/client apps/admin
          # Check actual structure and adapt
          if [ -d "artifacts/apps/client/out" ]; then
            cp -r artifacts/apps/client/out apps/client/
            cp -r artifacts/apps/admin/out apps/admin/
          elif [ -d "artifacts/client/out" ]; then
            cp -r artifacts/client/out apps/client/
            cp -r artifacts/admin/out apps/admin/
          else
            echo "‚ùå Unexpected artifact structure"
            find artifacts -name "out" -type d
            exit 1
          fi
          rm -rf artifacts
          echo "‚úÖ Directory structure restored"

      - name: Verify restored structure
        if: steps.check.outputs.artifacts_found == 'true'
        run: |
          echo "=== Verifying restored structure ==="
          echo "Client out directory:"
          ls -la apps/client/out/ | head -5
          echo "Admin out directory:"
          ls -la apps/admin/out/ | head -5
          echo "‚úÖ Structure verification complete"

      - name: Upload client build artifacts for deployment
        if: steps.check.outputs.artifacts_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: client-build-dev
          path: apps/client/out/
          retention-days: 1

      - name: Upload admin build artifacts for deployment
        if: steps.check.outputs.artifacts_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: admin-build-dev
          path: apps/admin/out/
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, build, download-artifacts]
    # Always depend on build and download-artifacts, even if they might be skipped
    if: always() && needs.determine-environment.outputs.should_deploy == 'true' && (needs.download-artifacts.result == 'success' || needs.build.result == 'success' || github.event.inputs.skip_build == 'true')
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.client_url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        run: |
          echo "[SIMULATED] Would configure AWS credentials"
          echo "role-to-assume: ${{ env.AWS_ROLE_ARN }}"
          echo "role-session-name: GitHubActions-Frontend-Deploy"
          echo "aws-region: ${{ env.AWS_REGION }}"

      - name: Download client build artifacts
        if: github.event.inputs.skip_build != 'true'
        uses: actions/download-artifact@v4
        with:
          name: client-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/client/out/

      - name: Download admin build artifacts
        if: github.event.inputs.skip_build != 'true'
        uses: actions/download-artifact@v4
        with:
          name: admin-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/admin/out/

      - name: Get infrastructure outputs
        id: get-infrastructure
        run: |
          STACK_NAME="${{ env.PROJECT_NAME }}-${{ needs.determine-environment.outputs.environment }}"
          echo "[SIMULATED] Would get infrastructure outputs from stack: $STACK_NAME"
          
          # Simulate outputs for testing
          CLIENT_BUCKET="simulated-client-bucket"
          ADMIN_BUCKET="simulated-admin-bucket"
          CLIENT_DISTRIBUTION_ID="SIMULATED123"
          ADMIN_DISTRIBUTION_ID="SIMULATED456"
          CLIENT_DOMAIN="simulated.cloudfront.net"
          ADMIN_DOMAIN="simulated-admin.cloudfront.net"
          
          echo "client_bucket=$CLIENT_BUCKET" >> $GITHUB_OUTPUT
          echo "admin_bucket=$ADMIN_BUCKET" >> $GITHUB_OUTPUT
          echo "client_distribution_id=$CLIENT_DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "admin_distribution_id=$ADMIN_DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "client_url=https://$CLIENT_DOMAIN" >> $GITHUB_OUTPUT
          echo "admin_url=https://$ADMIN_DOMAIN" >> $GITHUB_OUTPUT

      - name: Deploy client application to S3
        run: |
          echo "üöÄ Deploying client application to S3..."
          echo "[SIMULATED] Would sync apps/client/out/ to s3://${{ steps.get-infrastructure.outputs.client_bucket }}/"
          echo "[SIMULATED] Using cache-control: public, max-age=31536000 for assets"
          echo "[SIMULATED] Using cache-control: public, max-age=0, must-revalidate for HTML"
          echo "[SIMULATED] Region: ${{ env.AWS_REGION }}"
          echo "‚úÖ Client application deployed to S3 (simulated)"

      - name: Deploy admin application to S3
        run: |
          echo "üöÄ Deploying admin application to S3..."
          echo "[SIMULATED] Would sync apps/admin/out/ to s3://${{ steps.get-infrastructure.outputs.admin_bucket }}/"
          echo "[SIMULATED] Using cache-control: public, max-age=31536000 for assets"
          echo "[SIMULATED] Using cache-control: public, max-age=0, must-revalidate for HTML"
          echo "[SIMULATED] Region: ${{ env.AWS_REGION }}"
          echo "‚úÖ Admin application deployed to S3 (simulated)"

      - name: Invalidate CloudFront distributions
        id: deploy
        run: |
          echo "üîÑ Invalidating CloudFront distributions..."
          echo "[SIMULATED] Would invalidate CloudFront distribution: ${{ steps.get-infrastructure.outputs.client_distribution_id }}"
          echo "[SIMULATED] Would invalidate CloudFront distribution: ${{ steps.get-infrastructure.outputs.admin_distribution_id }}"
          
          CLIENT_INVALIDATION_ID="SIMULATED-INV-123"
          ADMIN_INVALIDATION_ID="SIMULATED-INV-456"
          
          echo "üîÑ Client invalidation ID: $CLIENT_INVALIDATION_ID (simulated)"
          echo "üîÑ Admin invalidation ID: $ADMIN_INVALIDATION_ID (simulated)"
          
          # Set outputs for URLs
          echo "client_url=${{ steps.get-infrastructure.outputs.client_url }}" >> $GITHUB_OUTPUT
          echo "admin_url=${{ steps.get-infrastructure.outputs.admin_url }}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ CloudFront invalidations completed (simulated)"

      - name: Update deployment status
        run: |
          echo "‚úÖ Frontend deployment completed successfully"
          echo "üåê Client URL: ${{ steps.deploy.outputs.client_url }}"
          echo "‚öôÔ∏è  Admin URL: ${{ steps.deploy.outputs.admin_url }}"
          echo "üì¶ Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "üèóÔ∏è  Stack: ${{ env.PROJECT_NAME }}-${{ needs.determine-environment.outputs.environment }}"

  notify:
    runs-on: ubuntu-latest
    needs: [determine-environment, build, download-artifacts, deploy]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "üéâ Frontend deployment to ${{ needs.determine-environment.outputs.environment }} was successful!"
          else
            echo "‚ùå Frontend deployment to ${{ needs.determine-environment.outputs.environment }} failed."
            exit 1
          fi