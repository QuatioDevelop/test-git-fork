name: 🌐 Frontend Deploy

run-name: 🌐 Frontend Deploy to ${{ inputs.environment || 'dev' }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: esenciafest-2025
  AWS_ROLE_ARN: arn:aws:iam::079827849938:role/GitHubActions-SuraEsenciaFest2025

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment || github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.client_url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment variables
        run: |
          ENV="${{ inputs.environment || github.event.inputs.environment }}"
          if [ "$ENV" = "dev" ]; then
            cp apps/client/.env.development apps/client/.env.local
            cp apps/admin/.env.development apps/admin/.env.local || echo "No .env.development for admin"
          elif [ "$ENV" = "staging" ]; then
            cp apps/client/.env.staging apps/client/.env.local
            cp apps/admin/.env.staging apps/admin/.env.local || echo "No .env.staging for admin"
          elif [ "$ENV" = "prod" ]; then
            cp apps/client/.env.production apps/client/.env.local
            cp apps/admin/.env.production apps/admin/.env.local || echo "No .env.production for admin"
          fi
          echo "Environment variables configured for: $ENV"

      - name: Build applications
        run: |
          echo "🏗️ Building applications..."
          npm run build
          npm run export
          echo "✅ Build completed"

      - name: Configure AWS credentials
        run: |
          echo "[SIMULATED] Would configure AWS credentials"
          echo "role-to-assume: ${{ env.AWS_ROLE_ARN }}"
          echo "role-session-name: GitHubActions-Frontend-Deploy"
          echo "aws-region: ${{ env.AWS_REGION }}"

      - name: Get infrastructure outputs
        id: get-infrastructure
        run: |
          ENV="${{ inputs.environment || github.event.inputs.environment }}"
          STACK_NAME="${{ env.PROJECT_NAME }}-$ENV"
          echo "[SIMULATED] Would get infrastructure outputs from stack: $STACK_NAME"
          
          # Simulate outputs for testing
          CLIENT_BUCKET="simulated-client-bucket-$ENV"
          ADMIN_BUCKET="simulated-admin-bucket-$ENV"
          CLIENT_DOMAIN="simulated-$ENV.cloudfront.net"
          ADMIN_DOMAIN="simulated-admin-$ENV.cloudfront.net"
          
          echo "client_bucket=$CLIENT_BUCKET" >> $GITHUB_OUTPUT
          echo "admin_bucket=$ADMIN_BUCKET" >> $GITHUB_OUTPUT
          echo "client_url=https://$CLIENT_DOMAIN" >> $GITHUB_OUTPUT
          echo "admin_url=https://$ADMIN_DOMAIN" >> $GITHUB_OUTPUT

      - name: Deploy applications
        id: deploy
        run: |
          echo "🚀 Deploying applications..."
          echo "[SIMULATED] Would sync apps/client/out/ to s3://${{ steps.get-infrastructure.outputs.client_bucket }}/"
          echo "[SIMULATED] Would sync apps/admin/out/ to s3://${{ steps.get-infrastructure.outputs.admin_bucket }}/"
          echo "[SIMULATED] Would invalidate CloudFront distributions"
          
          # Set outputs for URLs
          echo "client_url=${{ steps.get-infrastructure.outputs.client_url }}" >> $GITHUB_OUTPUT
          echo "admin_url=${{ steps.get-infrastructure.outputs.admin_url }}" >> $GITHUB_OUTPUT
          
          echo "✅ Frontend deployment completed (simulated)"

      - name: Summary
        run: |
          echo "✅ Frontend deployment completed successfully"
          echo "🌐 Client URL: ${{ steps.deploy.outputs.client_url }}"
          echo "⚙️ Admin URL: ${{ steps.deploy.outputs.admin_url }}"
          echo "📦 Environment: ${{ inputs.environment || github.event.inputs.environment }}"