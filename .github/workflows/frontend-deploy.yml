name: 🌐 Frontend Deploy

run-name: 🌐 Frontend Deploy to ${{ inputs.environment || 'dev' }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_build:
        description: 'Skip build and use artifacts from cache'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: esenciafest-2025
  AWS_ROLE_ARN: arn:aws:iam::079827849938:role/GitHubActions-SuraEsenciaFest2025

jobs:
  determine-environment:
    uses: ./.github/workflows/determine-environment.yml
    with:
      environment: ${{ inputs.environment }}

  download-artifacts:
    runs-on: ubuntu-latest
    needs: determine-environment
    outputs:
      artifacts_found: ${{ steps.check.outputs.artifacts_found }}
    steps:
      - name: Attempt to download build artifacts from Pre-Deploy Testing
        id: download
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: pre-deploy-testing.yml
          name: build-artifacts-${{ github.sha }}
          commit: ${{ github.sha }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          path: ./artifacts
          if_no_artifact_found: warn

      - name: Check if artifacts were downloaded
        id: check
        run: |
          if [ -d "./artifacts" ] && [ "$(ls -A ./artifacts)" ]; then
            echo "artifacts_found=true" >> $GITHUB_OUTPUT
            echo "✅ Artifacts found and downloaded from commit ${{ github.sha }}"
          else
            echo "artifacts_found=false" >> $GITHUB_OUTPUT
            echo "❌ No artifacts found for commit ${{ github.sha }}, will need to build"
          fi

      - name: Debug artifact structure
        if: steps.check.outputs.artifacts_found == 'true'
        run: |
          echo "=== Debugging artifact structure ==="
          echo "Contents of artifacts directory:"
          find artifacts -type f | head -20
          echo "Directory structure:"
          find artifacts -type d
          echo "✅ Debug complete"

      - name: Restore expected directory structure
        if: steps.check.outputs.artifacts_found == 'true'
        run: |
          echo "=== Restoring directory structure ==="
          mkdir -p apps/client apps/admin
          # Check actual structure and adapt
          if [ -d "artifacts/apps/client/out" ]; then
            cp -r artifacts/apps/client/out apps/client/
            cp -r artifacts/apps/admin/out apps/admin/
          elif [ -d "artifacts/client/out" ]; then
            cp -r artifacts/client/out apps/client/
            cp -r artifacts/admin/out apps/admin/
          else
            echo "❌ Unexpected artifact structure"
            find artifacts -name "out" -type d
            exit 1
          fi
          rm -rf artifacts
          echo "✅ Directory structure restored"

      - name: Verify restored structure
        if: steps.check.outputs.artifacts_found == 'true'
        run: |
          echo "=== Verifying restored structure ==="
          echo "Client out directory:"
          ls -la apps/client/out/ | head -5
          echo "Admin out directory:"
          ls -la apps/admin/out/ | head -5
          echo "✅ Structure verification complete"

      - name: Upload client build artifacts for deployment
        if: steps.check.outputs.artifacts_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: client-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/client/out/
          retention-days: 1

      - name: Upload admin build artifacts for deployment
        if: steps.check.outputs.artifacts_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: admin-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/admin/out/
          retention-days: 1

  build:
    runs-on: ubuntu-latest
    needs: [determine-environment, download-artifacts]
    if: github.event.inputs.skip_build != 'true' && needs.download-artifacts.outputs.artifacts_found == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment variables
        run: |
          # Copy appropriate .env file to .env.local for each app based on deployment environment
          ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
          if [ "$ENVIRONMENT" = "dev" ]; then
            cp apps/client/.env.development apps/client/.env.local
            cp apps/admin/.env.development apps/admin/.env.local || echo "No .env.development for admin, using defaults"
          elif [ "$ENVIRONMENT" = "staging" ]; then
            cp apps/client/.env.staging apps/client/.env.local
            cp apps/admin/.env.staging apps/admin/.env.local || echo "No .env.staging for admin, using defaults"
          elif [ "$ENVIRONMENT" = "prod" ]; then
            cp apps/client/.env.production apps/client/.env.local
            cp apps/admin/.env.production apps/admin/.env.local || echo "No .env.production for admin, using defaults"
          fi
          echo "Environment variables configured for: $ENVIRONMENT"

      - name: Build applications
        run: npm run build

      - name: Export static builds
        run: npm run export

      - name: Upload client build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/client/out/
          retention-days: 7

      - name: Upload admin build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: admin-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/admin/out/
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, build, download-artifacts]
    if: always() && (needs.download-artifacts.result == 'success' || needs.build.result == 'success' || github.event.inputs.skip_build == 'true')
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.client_url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download client build artifacts
        if: github.event.inputs.skip_build != 'true'
        uses: actions/download-artifact@v4
        with:
          name: client-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/client/out/

      - name: Download admin build artifacts
        if: github.event.inputs.skip_build != 'true'
        uses: actions/download-artifact@v4
        with:
          name: admin-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/admin/out/

      - name: Configure AWS credentials
        run: |
          echo "[SIMULATED] Would configure AWS credentials"
          echo "role-to-assume: ${{ env.AWS_ROLE_ARN }}"
          echo "role-session-name: GitHubActions-Frontend-Deploy"
          echo "aws-region: ${{ env.AWS_REGION }}"

      - name: Get infrastructure outputs
        id: get-infrastructure
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          STACK_NAME="${{ env.PROJECT_NAME }}-$ENV"
          echo "[SIMULATED] Would get infrastructure outputs from stack: $STACK_NAME"
          
          # Simulate outputs for testing
          CLIENT_BUCKET="simulated-client-bucket-$ENV"
          ADMIN_BUCKET="simulated-admin-bucket-$ENV"
          CLIENT_DOMAIN="simulated-$ENV.cloudfront.net"
          ADMIN_DOMAIN="simulated-admin-$ENV.cloudfront.net"
          
          echo "client_bucket=$CLIENT_BUCKET" >> $GITHUB_OUTPUT
          echo "admin_bucket=$ADMIN_BUCKET" >> $GITHUB_OUTPUT
          echo "client_url=https://$CLIENT_DOMAIN" >> $GITHUB_OUTPUT
          echo "admin_url=https://$ADMIN_DOMAIN" >> $GITHUB_OUTPUT

      - name: Deploy applications
        id: deploy
        run: |
          echo "🚀 Deploying applications..."
          echo "[SIMULATED] Would sync apps/client/out/ to s3://${{ steps.get-infrastructure.outputs.client_bucket }}/"
          echo "[SIMULATED] Would sync apps/admin/out/ to s3://${{ steps.get-infrastructure.outputs.admin_bucket }}/"
          echo "[SIMULATED] Would invalidate CloudFront distributions"
          
          # Show what we're deploying
          echo "📁 Client artifacts:"
          ls -la apps/client/out/ | head -5
          echo "📁 Admin artifacts:"
          ls -la apps/admin/out/ | head -5
          
          # Set outputs for URLs
          echo "client_url=${{ steps.get-infrastructure.outputs.client_url }}" >> $GITHUB_OUTPUT
          echo "admin_url=${{ steps.get-infrastructure.outputs.admin_url }}" >> $GITHUB_OUTPUT
          
          echo "✅ Frontend deployment completed (simulated)"

      - name: Summary
        run: |
          echo "✅ Frontend deployment completed successfully"
          echo "🌐 Client URL: ${{ steps.deploy.outputs.client_url }}"
          echo "⚙️ Admin URL: ${{ steps.deploy.outputs.admin_url }}"
          echo "📦 Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "🔗 Commit SHA: ${{ github.sha }}"
          echo "📋 Artifact source: ${{ needs.download-artifacts.outputs.artifacts_found == 'true' && 'Pre-Deploy Testing' || 'Fresh Build' }}"