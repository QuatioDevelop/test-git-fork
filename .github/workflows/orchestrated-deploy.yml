name: 🚀 Orchestrated Deploy

run-name: 🚀 Orchestrated Deploy to ${{ (github.ref == 'refs/heads/main' && 'dev') || (github.ref == 'refs/heads/staging' && 'staging') || (github.ref == 'refs/heads/production' && 'prod') || 'unknown' }} - ${{ github.ref_name }}

on:
  push:
    branches: [main, staging, production]
    paths:
      - 'apps/**'
      - 'iac/backend/**'
      - 'package.json'
      - 'turbo.json'
  workflow_dispatch:
    inputs:
      force_backend:
        description: 'Force backend deployment even without changes'
        required: false
        default: false
        type: boolean
      force_frontend:
        description: 'Force frontend deployment even without changes'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'

jobs:
  determine-environment:
    uses: ./.github/workflows/determine-environment.yml

  detect-changes:
    runs-on: ubuntu-latest
    needs: determine-environment
    outputs:
      backend-changed: ${{ steps.filter.outputs.backend }}
      frontend-changed: ${{ steps.filter.outputs.frontend }}
      should_test: ${{ steps.filter.outputs.has_changes }}
      environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to ensure merge base is available

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.event.before }}
          filters: |
            backend:
              - 'iac/backend/**'
            frontend:
              - 'apps/**'
              - 'package.json'
              - 'turbo.json'
            has_changes:
              - 'iac/backend/**'
              - 'apps/**'
              - 'package.json'
              - 'turbo.json'

      - name: Show detected changes
        run: |
          echo "🔍 Change Detection Results:"
          echo "Environment: ${{ steps.env.outputs.environment }}"
          echo "Backend changed: ${{ steps.filter.outputs.backend }}"
          echo "Frontend changed: ${{ steps.filter.outputs.frontend }}"
          echo "Has changes: ${{ steps.filter.outputs.has_changes }}"
          echo "Force backend: ${{ github.event.inputs.force_backend }}"
          echo "Force frontend: ${{ github.event.inputs.force_frontend }}"

  # STUB JOBS FOR PATH TESTING - NO ACTUAL DEPLOYMENT
  
  frontend-only-flow:
    runs-on: ubuntu-latest
    needs: [determine-path]
    if: needs.determine-path.outputs.path == 'frontend-only'
    steps:
      - name: Frontend-Only Flow (STUB)
        run: |
          echo "🌐 FRONTEND-ONLY FLOW TRIGGERED"
          echo "Path: ${{ needs.determine-path.outputs.path }}"
          echo "Description: ${{ needs.determine-path.outputs.description }}"
          echo "This would execute: pre-test → build → deploy-frontend"
          echo "SUCCESS: Frontend-only path working correctly"

  backend-frontend-flow:
    runs-on: ubuntu-latest
    needs: [determine-path]
    if: needs.determine-path.outputs.path == 'backend-frontend'
    steps:
      - name: Backend + Frontend Flow (STUB)
        run: |
          echo "🔧🌐 BACKEND + FRONTEND FLOW TRIGGERED"
          echo "Path: ${{ needs.determine-path.outputs.path }}"
          echo "Description: ${{ needs.determine-path.outputs.description }}"
          echo "This would execute: deploy-backend → pre-test → deploy-frontend"
          echo "SUCCESS: Backend + Frontend path working correctly"

  backend-only-flow:
    runs-on: ubuntu-latest
    needs: [determine-path]
    if: needs.determine-path.outputs.path == 'backend-only'
    steps:
      - name: Backend-Only Flow (STUB)
        run: |
          echo "🔧 BACKEND-ONLY FLOW TRIGGERED"
          echo "Path: ${{ needs.determine-path.outputs.path }}"
          echo "Description: ${{ needs.determine-path.outputs.description }}"
          echo "This would execute: deploy-backend"
          echo "SUCCESS: Backend-only path working correctly"

  no-changes-detected:
    runs-on: ubuntu-latest
    needs: [determine-path]
    if: needs.determine-path.outputs.path == 'no-changes'
    steps:
      - name: No Changes Flow (STUB)
        run: |
          echo "⏭️ NO CHANGES DETECTED"
          echo "Path: ${{ needs.determine-path.outputs.path }}"
          echo "Description: ${{ needs.determine-path.outputs.description }}"
          echo "No deployment needed"
          echo "SUCCESS: No-changes path working correctly"

  determine-path:
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      path: ${{ steps.path.outputs.path }}
      description: ${{ steps.path.outputs.description }}
    steps:
      - name: Determine deployment path
        id: path
        run: |
          echo "=== Change Detection Results ==="
          echo "Backend changed: '${{ needs.detect-changes.outputs.backend-changed }}'"
          echo "Frontend changed: '${{ needs.detect-changes.outputs.frontend-changed }}'"
          echo "Force backend: '${{ github.event.inputs.force_backend }}'"
          echo "Force frontend: '${{ github.event.inputs.force_frontend }}'"
          echo ""
          
          # Determine which path to take
          BACKEND_DEPLOY=$([ "${{ needs.detect-changes.outputs.backend-changed }}" = "true" ] || [ "${{ github.event.inputs.force_backend }}" = "true" ] && echo "true" || echo "false")
          FRONTEND_DEPLOY=$([ "${{ needs.detect-changes.outputs.frontend-changed }}" = "true" ] || [ "${{ github.event.inputs.force_frontend }}" = "true" ] && echo "true" || echo "false")
          
          echo "Backend needs deploy: $BACKEND_DEPLOY"
          echo "Frontend needs deploy: $FRONTEND_DEPLOY"
          echo ""
          
          if [ "$BACKEND_DEPLOY" = "true" ] && [ "$FRONTEND_DEPLOY" = "true" ]; then
            PATH_TYPE="backend-frontend"
            DESCRIPTION="Backend + Frontend deployment"
          elif [ "$FRONTEND_DEPLOY" = "true" ]; then
            PATH_TYPE="frontend-only"
            DESCRIPTION="Frontend-only deployment"
          elif [ "$BACKEND_DEPLOY" = "true" ]; then
            PATH_TYPE="backend-only"
            DESCRIPTION="Backend-only deployment"
          else
            PATH_TYPE="no-changes"
            DESCRIPTION="No deployment needed"
          fi
          
          echo "=== Path Determination ==="
          echo "Selected path: $PATH_TYPE"
          echo "Description: $DESCRIPTION"
          
          echo "path=$PATH_TYPE" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT

  # E2E TESTING (runs automatically if any flow succeeds)
  post-deploy-e2e:
    runs-on: ubuntu-latest
    needs: [frontend-only-flow, backend-frontend-flow, backend-only-flow]
    steps:
      - name: E2E Testing (STUB)
        run: |
          echo "🔍 E2E TESTING TRIGGERED"
          echo "Frontend-only result: ${{ needs.frontend-only-flow.result }}"
          echo "Backend+Frontend result: ${{ needs.backend-frontend-flow.result }}"
          echo "Backend-only result: ${{ needs.backend-only-flow.result }}"
          echo ""
          echo "This would execute E2E tests against deployed environment"
          echo "SUCCESS: E2E path working correctly"

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [determine-path, frontend-only-flow, backend-frontend-flow, backend-only-flow, post-deploy-e2e]
    if: always()
    steps:
      - name: Path Testing Summary
        run: |
          echo "## 🚀 Path Detection Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.determine-path.outputs.environment || 'test' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Detected Path:** ${{ needs.determine-path.outputs.path }}" >> $GITHUB_STEP_SUMMARY
          echo "**Description:** ${{ needs.determine-path.outputs.description }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Flow | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 Frontend-Only | ${{ needs.frontend-only-flow.result || 'skipped' }} | ${{ needs.frontend-only-flow.result == 'success' && '✅ Correct' || (needs.frontend-only-flow.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧🌐 Backend+Frontend | ${{ needs.backend-frontend-flow.result || 'skipped' }} | ${{ needs.backend-frontend-flow.result == 'success' && '✅ Correct' || (needs.backend-frontend-flow.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 Backend-Only | ${{ needs.backend-only-flow.result || 'skipped' }} | ${{ needs.backend-only-flow.result == 'success' && '✅ Correct' || (needs.backend-only-flow.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 E2E Tests | ${{ needs.post-deploy-e2e.result || 'skipped' }} | ${{ needs.post-deploy-e2e.result == 'success' && '✅ Triggered' || (needs.post-deploy-e2e.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Status:** Only ONE path should execute based on detected changes." >> $GITHUB_STEP_SUMMARY