{"body":"# 🔐 Implementar Protección API con Cognito para Usuarios Admin\n\n## 📋 Descripción\nImplementar sistema de autenticación basado en AWS Cognito que complemente el sistema JWT existente, estableciendo protección para endpoints `/admin/*` con al menos un usuario admin (super admin) que pueda crear otros usuarios admin.\n\n## 🎯 Objetivos\n- ✅ **Un solo PR** con funcionalidad completa end-to-end\n- ✅ **Desarrollo por commits independientes** (infraestructura → middleware → frontend → testing)\n- ✅ **Implementación mínima pero sólida** preparada para roles futuros\n- ✅ **Sin afectar flujo JWT** de usuarios regulares existente\n\n## 🛠️ Componentes de Implementación\n\n### 1. 🏗️ Infraestructura Base\n- [ ] Agregar User Pool Cognito en `iac/backend/template.yaml`\n- [ ] Configurar Identity Pool y roles IAM necesarios  \n- [ ] Definir parámetros por environment (dev/staging/prod)\n- [ ] Configurar outputs para integración con frontend\n\n### 2. 🔒 Middleware de Autorización\n- [ ] Crear middleware reutilizable para validar tokens Cognito (`src/utils/auth-middleware.js`)\n- [ ] Aplicar protección a endpoints existentes en `src/admin-rooms.js` (remover comentario TODO)\n- [ ] Estructura extensible para roles futuros (super-admin, admin)\n- [ ] Manejo de errores 401/403 con mensajes claros\n\n### 3. 👥 Gestión Básica de Usuarios (Opcional en MVP)\n- [ ] Endpoint `POST /admin/users` para que super admin cree usuarios admin\n- [ ] Endpoint `GET /admin/users` para listar usuarios admin\n- [ ] Estrategia para crear usuario admin inicial (manual o script)\n- [ ] Validación de permisos granulares\n\n### 4. 🖥️ Integración Frontend\n- [ ] Implementar login Cognito en admin panel (`apps/admin/`)\n- [ ] Manejo de tokens Cognito y localStorage\n- [ ] Redirects automáticos para usuarios no autenticados\n- [ ] UI para gestión de usuarios admin (si se implementa punto 3)\n\n### 5. 🚀 GitHub Actions & Testing\n- [ ] Actualizar permisos CI/CD para desplegar recursos Cognito\n- [ ] Expandir tests existentes en `tests/e2e/admin.spec.ts`:\n  - [ ] Flujo de login con Cognito\n  - [ ] Validación de acceso a endpoints protegidos\n  - [ ] Manejo de errores de autenticación\n- [ ] Tests unitarios para middleware de autorización\n\n## 🔗 Integraciones Existentes\n- **Endpoints a proteger**: `/admin/rooms/{roomId}/override`, `/admin/rooms/{roomId}/schedule`\n- **Tests base**: `tests/e2e/admin.spec.ts` (expandir, no reescribir)\n- **Infraestructura**: SAM template existente en `iac/backend/template.yaml`\n- **Frontend**: Admin panel en `apps/admin/` (puerto 3001)\n\n## ⚡ Consideraciones Técnicas\n- **Arquitectura híbrida**: JWT para usuarios regulares + Cognito para admin\n- **No breaking changes**: Sistema JWT actual permanece intacto\n- **Extensibilidad**: Preparado para roles granulares futuros\n- **Security first**: Logging básico de accesos admin para auditoría\n\n## 🎁 Entregables\n- [ ] ✅ Usuario admin puede acceder a endpoints `/admin/*` con Cognito\n- [ ] ✅ Frontend admin con login Cognito funcional\n- [ ] ✅ Tests E2E actualizados y pasando\n- [ ] ✅ Infraestructura desplegada en dev environment\n- [ ] ✅ Documentación básica de uso\n\n## 🔄 Criterios de Aceptación\n1. **Funcionalidad Core**: Admin puede hacer login con Cognito y acceder a endpoints protegidos\n2. **Seguridad**: Endpoints `/admin/*` rechazan requests sin token Cognito válido\n3. **Frontend**: Admin panel redirige a login si no está autenticado\n4. **Testing**: Tests E2E pasan incluyendo flujos de autenticación\n5. **Deployment**: CI/CD funciona correctamente con nuevos recursos Cognito\n\n## 📚 Referencias\n- **Documentación API**: `doc/04-api-design.md` (sección Admin Panel Cognito)\n- **Arquitectura**: `doc/05-arquitectura-datos.md` \n- **Tests base**: `tests/e2e/admin.spec.ts`\n- **Template SAM**: `iac/backend/template.yaml`\n\n---\n*Implementación completa en un solo PR con desarrollo incremental por commits*","state":"OPEN","title":"Implementar protección API con Cognito para usuarios admin"}
